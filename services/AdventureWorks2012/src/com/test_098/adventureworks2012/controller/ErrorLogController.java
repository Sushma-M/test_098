/*Copyright (c) 2015-2016 imaginea-com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea-com*/
package com.test_098.adventureworks2012.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.test_098.adventureworks2012.ErrorLog;
import com.test_098.adventureworks2012.service.ErrorLogService;


/**
 * Controller object for domain model class ErrorLog.
 * @see ErrorLog
 */
@RestController("AdventureWorks2012.ErrorLogController")
@Api(value = "ErrorLogController", description = "Exposes APIs to work with ErrorLog resource.")
@RequestMapping("/AdventureWorks2012/ErrorLog")
public class ErrorLogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ErrorLogController.class);

    @Autowired
	@Qualifier("AdventureWorks2012.ErrorLogService")
	private ErrorLogService errorLogService;

	@ApiOperation(value = "Creates a new ErrorLog instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public ErrorLog createErrorLog(@RequestBody ErrorLog errorLog) {
		LOGGER.debug("Create ErrorLog with information: {}" , errorLog);

		errorLog = errorLogService.create(errorLog);
		LOGGER.debug("Created ErrorLog with information: {}" , errorLog);

	    return errorLog;
	}

    @ApiOperation(value = "Returns the ErrorLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ErrorLog getErrorLog(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ErrorLog with id: {}" , id);

        ErrorLog foundErrorLog = errorLogService.getById(id);
        LOGGER.debug("ErrorLog details with id: {}" , foundErrorLog);

        return foundErrorLog;
    }

    @ApiOperation(value = "Updates the ErrorLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ErrorLog editErrorLog(@PathVariable("id") Integer id, @RequestBody ErrorLog errorLog) throws EntityNotFoundException {
        LOGGER.debug("Editing ErrorLog with id: {}" , errorLog.getErrorLogId());

        errorLog.setErrorLogId(id);
        errorLog = errorLogService.update(errorLog);
        LOGGER.debug("ErrorLog details with id: {}" , errorLog);

        return errorLog;
    }

    @ApiOperation(value = "Deletes the ErrorLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteErrorLog(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ErrorLog with id: {}" , id);

        ErrorLog deletedErrorLog = errorLogService.delete(id);

        return deletedErrorLog != null;
    }

    /**
     * @deprecated Use {@link #findErrorLogs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ErrorLog instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ErrorLog> searchErrorLogsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ErrorLogs list");
        return errorLogService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ErrorLog instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ErrorLog> findErrorLogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ErrorLogs list");
        return errorLogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ErrorLog instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ErrorLog> filterErrorLogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ErrorLogs list");
        return errorLogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportErrorLogs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return errorLogService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ErrorLog instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countErrorLogs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ErrorLogs");
		return errorLogService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getErrorLogAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return errorLogService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ErrorLogService instance
	 */
	protected void setErrorLogService(ErrorLogService service) {
		this.errorLogService = service;
	}

}

